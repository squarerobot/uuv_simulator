// Generated by gencpp from file uuv_manipulators_msgs/ArmConfigCommand.msg
// DO NOT EDIT!


#ifndef UUV_MANIPULATORS_MSGS_MESSAGE_ARMCONFIGCOMMAND_H
#define UUV_MANIPULATORS_MSGS_MESSAGE_ARMCONFIGCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_manipulators_msgs
{
template <class ContainerAllocator>
struct ArmConfigCommand_
{
  typedef ArmConfigCommand_<ContainerAllocator> Type;

  ArmConfigCommand_()
    : command()
    , args()  {
    }
  ArmConfigCommand_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _args_type;
  _args_type args;


    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HOME;
 

  typedef boost::shared_ptr< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ArmConfigCommand_

typedef ::uuv_manipulators_msgs::ArmConfigCommand_<std::allocator<void> > ArmConfigCommand;

typedef boost::shared_ptr< ::uuv_manipulators_msgs::ArmConfigCommand > ArmConfigCommandPtr;
typedef boost::shared_ptr< ::uuv_manipulators_msgs::ArmConfigCommand const> ArmConfigCommandConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ArmConfigCommand_<ContainerAllocator>::HOME =
        
          "home"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uuv_manipulators_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'uuv_manipulators_msgs': ['/home/amishsqrrob/uuv_simulator/src/uuv_manipulators/uuv_manipulators_commons/uuv_manipulators_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "428ecc7602e5c382dfc52081cc34f5a6";
  }

  static const char* value(const ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x428ecc7602e5c382ULL;
  static const uint64_t static_value2 = 0xdfc52081cc34f5a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_manipulators_msgs/ArmConfigCommand";
  }

  static const char* value(const ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Commands to drive the arm to default configuration\n\
string  command     # Operation tag\n\
# Default commands\n\
string  HOME      = home\n\
# Place for arguments, if needed\n\
string  args\n\
";
  }

  static const char* value(const ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmConfigCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_manipulators_msgs::ArmConfigCommand_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "args: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_MANIPULATORS_MSGS_MESSAGE_ARMCONFIGCOMMAND_H
