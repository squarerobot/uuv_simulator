// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorPressure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorPressure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Pressure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pressure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorPressure_2eproto() {
  protobuf_AddDesc_SensorPressure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorPressure.proto");
  GOOGLE_CHECK(file != NULL);
  Pressure_descriptor_ = file->message_type(0);
  static const int Pressure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, stddev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, depth_),
  };
  Pressure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pressure_descriptor_,
      Pressure::default_instance_,
      Pressure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pressure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pressure));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorPressure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pressure_descriptor_, &Pressure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorPressure_2eproto() {
  delete Pressure::default_instance_;
  delete Pressure_reflection_;
}

void protobuf_AddDesc_SensorPressure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SensorPressure.proto\022\020sensor_msgs.msgs"
    "\"F\n\010Pressure\022\023\n\010pressure\030\001 \002(\001:\0010\022\022\n\006std"
    "dev\030\002 \002(\001:\002-1\022\021\n\005depth\030\003 \001(\001:\002-1", 112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorPressure.proto", &protobuf_RegisterTypes);
  Pressure::default_instance_ = new Pressure();
  Pressure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorPressure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorPressure_2eproto {
  StaticDescriptorInitializer_SensorPressure_2eproto() {
    protobuf_AddDesc_SensorPressure_2eproto();
  }
} static_descriptor_initializer_SensorPressure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Pressure::kPressureFieldNumber;
const int Pressure::kStddevFieldNumber;
const int Pressure::kDepthFieldNumber;
#endif  // !_MSC_VER

Pressure::Pressure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.Pressure)
}

void Pressure::InitAsDefaultInstance() {
}

Pressure::Pressure(const Pressure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Pressure)
}

void Pressure::SharedCtor() {
  _cached_size_ = 0;
  pressure_ = 0;
  stddev_ = -1;
  depth_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pressure::~Pressure() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Pressure)
  SharedDtor();
}

void Pressure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pressure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pressure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pressure_descriptor_;
}

const Pressure& Pressure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorPressure_2eproto();
  return *default_instance_;
}

Pressure* Pressure::default_instance_ = NULL;

Pressure* Pressure::New() const {
  return new Pressure;
}

void Pressure::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    pressure_ = 0;
    stddev_ = -1;
    depth_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pressure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.Pressure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double pressure = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_stddev;
        break;
      }

      // required double stddev = 2 [default = -1];
      case 2: {
        if (tag == 17) {
         parse_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stddev_)));
          set_has_stddev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_depth;
        break;
      }

      // optional double depth = 3 [default = -1];
      case 3: {
        if (tag == 25) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.Pressure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.Pressure)
  return false;
#undef DO_
}

void Pressure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.Pressure)
  // required double pressure = 1 [default = 0];
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pressure(), output);
  }

  // required double stddev = 2 [default = -1];
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stddev(), output);
  }

  // optional double depth = 3 [default = -1];
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->depth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.Pressure)
}

::google::protobuf::uint8* Pressure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Pressure)
  // required double pressure = 1 [default = 0];
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pressure(), target);
  }

  // required double stddev = 2 [default = -1];
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stddev(), target);
  }

  // optional double depth = 3 [default = -1];
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->depth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Pressure)
  return target;
}

int Pressure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double pressure = 1 [default = 0];
    if (has_pressure()) {
      total_size += 1 + 8;
    }

    // required double stddev = 2 [default = -1];
    if (has_stddev()) {
      total_size += 1 + 8;
    }

    // optional double depth = 3 [default = -1];
    if (has_depth()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pressure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pressure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pressure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pressure::MergeFrom(const Pressure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pressure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pressure::CopyFrom(const Pressure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pressure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pressure::Swap(Pressure* other) {
  if (other != this) {
    std::swap(pressure_, other->pressure_);
    std::swap(stddev_, other->stddev_);
    std::swap(depth_, other->depth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pressure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pressure_descriptor_;
  metadata.reflection = Pressure_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
