// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDvl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SensorDvl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Dvl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dvl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SensorDvl_2eproto() {
  protobuf_AddDesc_SensorDvl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SensorDvl.proto");
  GOOGLE_CHECK(file != NULL);
  Dvl_descriptor_ = file->message_type(0);
  static const int Dvl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, linear_velocity_covariance_),
  };
  Dvl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dvl_descriptor_,
      Dvl::default_instance_,
      Dvl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dvl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dvl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SensorDvl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dvl_descriptor_, &Dvl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SensorDvl_2eproto() {
  delete Dvl::default_instance_;
  delete Dvl_reflection_;
}

void protobuf_AddDesc_SensorDvl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SensorDvl.proto\022\020sensor_msgs.msgs\032\016vec"
    "tor3d.proto\"]\n\003Dvl\022.\n\017linear_velocity\030\001 "
    "\002(\0132\025.gazebo.msgs.Vector3d\022&\n\032linear_vel"
    "ocity_covariance\030\002 \003(\002B\002\020\001", 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorDvl.proto", &protobuf_RegisterTypes);
  Dvl::default_instance_ = new Dvl();
  Dvl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SensorDvl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SensorDvl_2eproto {
  StaticDescriptorInitializer_SensorDvl_2eproto() {
    protobuf_AddDesc_SensorDvl_2eproto();
  }
} static_descriptor_initializer_SensorDvl_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Dvl::kLinearVelocityFieldNumber;
const int Dvl::kLinearVelocityCovarianceFieldNumber;
#endif  // !_MSC_VER

Dvl::Dvl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.Dvl)
}

void Dvl::InitAsDefaultInstance() {
  linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Dvl::Dvl(const Dvl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Dvl)
}

void Dvl::SharedCtor() {
  _cached_size_ = 0;
  linear_velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dvl::~Dvl() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Dvl)
  SharedDtor();
}

void Dvl::SharedDtor() {
  if (this != default_instance_) {
    delete linear_velocity_;
  }
}

void Dvl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dvl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dvl_descriptor_;
}

const Dvl& Dvl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SensorDvl_2eproto();
  return *default_instance_;
}

Dvl* Dvl::default_instance_ = NULL;

Dvl* Dvl::New() const {
  return new Dvl;
}

void Dvl::Clear() {
  if (has_linear_velocity()) {
    if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
  }
  linear_velocity_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dvl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.Dvl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d linear_velocity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_velocity_covariance;
        break;
      }

      // repeated float linear_velocity_covariance = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_linear_velocity_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_velocity_covariance())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_linear_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.Dvl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.Dvl)
  return false;
#undef DO_
}

void Dvl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.Dvl)
  // required .gazebo.msgs.Vector3d linear_velocity = 1;
  if (has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linear_velocity(), output);
  }

  // repeated float linear_velocity_covariance = 2 [packed = true];
  if (this->linear_velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_velocity_covariance_cached_byte_size_);
  }
  for (int i = 0; i < this->linear_velocity_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->linear_velocity_covariance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.Dvl)
}

::google::protobuf::uint8* Dvl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Dvl)
  // required .gazebo.msgs.Vector3d linear_velocity = 1;
  if (has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linear_velocity(), target);
  }

  // repeated float linear_velocity_covariance = 2 [packed = true];
  if (this->linear_velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_velocity_covariance_cached_byte_size_, target);
  }
  for (int i = 0; i < this->linear_velocity_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_velocity_covariance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Dvl)
  return target;
}

int Dvl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Vector3d linear_velocity = 1;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_velocity());
    }

  }
  // repeated float linear_velocity_covariance = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->linear_velocity_covariance_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_velocity_covariance_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dvl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dvl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dvl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dvl::MergeFrom(const Dvl& from) {
  GOOGLE_CHECK_NE(&from, this);
  linear_velocity_covariance_.MergeFrom(from.linear_velocity_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear_velocity()) {
      mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.linear_velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dvl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dvl::CopyFrom(const Dvl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dvl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_linear_velocity()) {
    if (!this->linear_velocity().IsInitialized()) return false;
  }
  return true;
}

void Dvl::Swap(Dvl* other) {
  if (other != this) {
    std::swap(linear_velocity_, other->linear_velocity_);
    linear_velocity_covariance_.Swap(&other->linear_velocity_covariance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dvl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dvl_descriptor_;
  metadata.reflection = Dvl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
