// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorMagnetic.proto

#ifndef PROTOBUF_SensorMagnetic_2eproto__INCLUDED
#define PROTOBUF_SensorMagnetic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SensorMagnetic_2eproto();
void protobuf_AssignDesc_SensorMagnetic_2eproto();
void protobuf_ShutdownFile_SensorMagnetic_2eproto();

class Magnetic;

// ===================================================================

class Magnetic : public ::google::protobuf::Message {
 public:
  Magnetic();
  virtual ~Magnetic();

  Magnetic(const Magnetic& from);

  inline Magnetic& operator=(const Magnetic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Magnetic& default_instance();

  void Swap(Magnetic* other);

  // implements Message ----------------------------------------------

  Magnetic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Magnetic& from);
  void MergeFrom(const Magnetic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d magnetic_field = 1;
  inline bool has_magnetic_field() const;
  inline void clear_magnetic_field();
  static const int kMagneticFieldFieldNumber = 1;
  inline const ::gazebo::msgs::Vector3d& magnetic_field() const;
  inline ::gazebo::msgs::Vector3d* mutable_magnetic_field();
  inline ::gazebo::msgs::Vector3d* release_magnetic_field();
  inline void set_allocated_magnetic_field(::gazebo::msgs::Vector3d* magnetic_field);

  // repeated float magnetic_field_covariance = 2 [packed = true];
  inline int magnetic_field_covariance_size() const;
  inline void clear_magnetic_field_covariance();
  static const int kMagneticFieldCovarianceFieldNumber = 2;
  inline float magnetic_field_covariance(int index) const;
  inline void set_magnetic_field_covariance(int index, float value);
  inline void add_magnetic_field_covariance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      magnetic_field_covariance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_magnetic_field_covariance();

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Magnetic)
 private:
  inline void set_has_magnetic_field();
  inline void clear_has_magnetic_field();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* magnetic_field_;
  ::google::protobuf::RepeatedField< float > magnetic_field_covariance_;
  mutable int _magnetic_field_covariance_cached_byte_size_;
  friend void  protobuf_AddDesc_SensorMagnetic_2eproto();
  friend void protobuf_AssignDesc_SensorMagnetic_2eproto();
  friend void protobuf_ShutdownFile_SensorMagnetic_2eproto();

  void InitAsDefaultInstance();
  static Magnetic* default_instance_;
};
// ===================================================================


// ===================================================================

// Magnetic

// required .gazebo.msgs.Vector3d magnetic_field = 1;
inline bool Magnetic::has_magnetic_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Magnetic::set_has_magnetic_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Magnetic::clear_has_magnetic_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Magnetic::clear_magnetic_field() {
  if (magnetic_field_ != NULL) magnetic_field_->::gazebo::msgs::Vector3d::Clear();
  clear_has_magnetic_field();
}
inline const ::gazebo::msgs::Vector3d& Magnetic::magnetic_field() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Magnetic.magnetic_field)
  return magnetic_field_ != NULL ? *magnetic_field_ : *default_instance_->magnetic_field_;
}
inline ::gazebo::msgs::Vector3d* Magnetic::mutable_magnetic_field() {
  set_has_magnetic_field();
  if (magnetic_field_ == NULL) magnetic_field_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:sensor_msgs.msgs.Magnetic.magnetic_field)
  return magnetic_field_;
}
inline ::gazebo::msgs::Vector3d* Magnetic::release_magnetic_field() {
  clear_has_magnetic_field();
  ::gazebo::msgs::Vector3d* temp = magnetic_field_;
  magnetic_field_ = NULL;
  return temp;
}
inline void Magnetic::set_allocated_magnetic_field(::gazebo::msgs::Vector3d* magnetic_field) {
  delete magnetic_field_;
  magnetic_field_ = magnetic_field;
  if (magnetic_field) {
    set_has_magnetic_field();
  } else {
    clear_has_magnetic_field();
  }
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.msgs.Magnetic.magnetic_field)
}

// repeated float magnetic_field_covariance = 2 [packed = true];
inline int Magnetic::magnetic_field_covariance_size() const {
  return magnetic_field_covariance_.size();
}
inline void Magnetic::clear_magnetic_field_covariance() {
  magnetic_field_covariance_.Clear();
}
inline float Magnetic::magnetic_field_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Magnetic.magnetic_field_covariance)
  return magnetic_field_covariance_.Get(index);
}
inline void Magnetic::set_magnetic_field_covariance(int index, float value) {
  magnetic_field_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Magnetic.magnetic_field_covariance)
}
inline void Magnetic::add_magnetic_field_covariance(float value) {
  magnetic_field_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.msgs.Magnetic.magnetic_field_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Magnetic::magnetic_field_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.msgs.Magnetic.magnetic_field_covariance)
  return magnetic_field_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Magnetic::mutable_magnetic_field_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.msgs.Magnetic.magnetic_field_covariance)
  return &magnetic_field_covariance_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SensorMagnetic_2eproto__INCLUDED
